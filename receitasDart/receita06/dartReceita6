import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';

class DataService {
  final ValueNotifier<List> tableStateNotifier = ValueNotifier([]);

  void carregar(int index) {
    if (index == 1)
      carregarCervejas();
    else if (index == 0)
      carregarCafes();
    else if (index == 2) carregarNacoes();
  }

  void carregarCervejas() {
    tableStateNotifier.value = [
      {
        "name": "La Fin Du Monde",
        "style": "Bock",
        "ibu": "65",
      },
      {
        "name": "Sapporo Premium",
        "style": "Sour Ale",
        "ibu": "54",
      },
      {
        "name": "Duvel",
        "style": "Pilsner",
        "ibu": "82",
      }
    ];
  }

  void carregarCafes() {
    tableStateNotifier.value = [
      {
        "name": "Café brasileiro",
        "origem": "Brasil",
        "nota": "4.5",
      },
      {
        "name": "Café colombiano",
        "origem": "Colômbia",
        "nota": "4.8",
      },
      {
        "name": "Café etíope",
        "origem": "Etiópia",
        "nota": "4.6",
      }
    ];
  }

  void carregarNacoes() {
    tableStateNotifier.value = [
      {
        "name": "Brasil",
        "population": "211 milhões",
        "language": "Português",
      },
      {
        "name": "EUA",
        "population": "331 milhões",
        "language": "Inglês",
      },
      {
        "name": "Japão",
        "population": "126 milhões",
        "language": "Japonês",
      }
    ];
  }
}

final dataService = DataService();

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      theme: ThemeData(
        primaryColor: Colors.pink,
        accentColor: Colors.blue,
      ),
      debugShowCheckedModeBanner: false,
      home: Scaffold(
        appBar: AppBar(title: const Text("Dicas")),
        body: ValueListenableBuilder(
          valueListenable: dataService.tableStateNotifier,
          builder: (_, value, __) {
            if (value.isNotEmpty) {
              if (value[0].containsKey("ibu")) {
                return DataTableWidget(
                  jsonObjects: value,
                  columnNames: ["Nome", "Estilo", "IBU"],
                  propertyNames: ["name", "style", "ibu"],
                );
              } else if (value[0].containsKey("nota")) {
                return DataTableWidget(
                  jsonObjects: value,
                  columnNames: ["Nome", "Origem", "Nota"],
                  propertyNames: ["name", "origem", "nota"],
                );
              } else if (value[0].containsKey("language")) {
                return DataTableWidget(
                  jsonObjects: value,
                  columnNames: ["Nome", "População", "Idioma"],
                  propertyNames: ["name", "population", "language"],
                );
              }
            }
            return const Center(child: Text("Nenhum item encontrado."));
          },
        ),
        bottomNavigationBar: NewNavBar(itemSelectedCallback: dataService.carregar),
      ),
    );
  }
}

class NewNavBar extends HookWidget {
  final Function(int) itemSelectedCallback;

  NewNavBar({required this.itemSelectedCallback});

  @override
  Widget build(BuildContext context) {
    var state = useState(1);

    return BottomNavigationBar(
      onTap: (int index) {
        state.value = index;
        itemSelectedCallback(index);
      },
      currentIndex: state.value,
      items: const [
        BottomNavigationBarItem(
          label: "Cafés",
          icon: Icon(Icons.coffee_outlined),
        ),
        BottomNavigationBarItem(
          label: "Cervejas",
          icon: Icon(Icons.local_drink_outlined),
        ),
        BottomNavigationBarItem(
          label: "Nações",
          icon: Icon(Icons.flag_outlined),
        )
      ],
    );
  }
}

class DataTableWidget extends StatelessWidget {
  final List jsonObjects;
  final List<String> columnNames;
  final List<String> propertyNames;

  DataTableWidget({
    this.jsonObjects = const [],
    this.columnNames = const ["Nome", "Estilo", "IBU"],
    this.propertyNames = const ["name", "style", "ibu"],
  });

  @override
  Widget build(BuildContext context) {
    return DataTable(
      columns: columnNames
          .map(
            (name) => DataColumn(
              label: Expanded(
                child: Text(
                  name,
                  style: TextStyle(fontStyle: FontStyle.italic),
                ),
              ),
            ),
          )
          .toList(),
      rows: jsonObjects
          .map(
            (obj) => DataRow(
              cells: propertyNames
                  .map(
                    (propName) => DataCell(
                      Text(obj[propName].toString()),
                    ),
                  )
                  .toList(),
            ),
          )
          .toList(),
    );
  }
}
